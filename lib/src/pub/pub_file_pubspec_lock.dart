import 'dart:collection';
import 'dart:convert';
import 'dart:io';

import 'package:yaml/yaml.dart';
import 'package:yamlicious/yamlicious.dart';

import '../common/package.dart';
import '../common/utils.dart' as utils;
import '../common/workspace.dart';
import '../pub/pub_file.dart';

class PubspecLockPubFile extends PubFile {
  Map<String, Map> _packages;

  Map<String, Map> _yamlParsed;

  Future<Map<String, Map>> get packages async {
    if (_packages != null) return _packages;

    var input = await File(filePath).readAsString();

    _yamlParsed =
        Map.from(json.decode(json.encode(loadYaml(input))) as LinkedHashMap);

    if (_yamlParsed['packages'] != null) {
      _packages = Map.from(_yamlParsed['packages'] as LinkedHashMap);
    } else {
      _packages = {};
    }

    return _packages;
  }

  PubspecLockPubFile._(String rootDirectory)
      : super(rootDirectory, 'pubspec.lock');

  factory PubspecLockPubFile.fromDirectory(String fileRootDirectory) {
    return PubspecLockPubFile._(fileRootDirectory);
  }

  static Future<PubspecLockPubFile> fromWorkspacePackage(
      MelosWorkspace workspace, MelosPackage package) async {
    PubspecLockPubFile workspaceFile =
        PubspecLockPubFile.fromDirectory(workspace.path);
    Map<String, Map> packagePackages = {};
    Map<String, Map> workspacePackages = await workspaceFile.packages;
    Set<String> dependencyGraph = await package.getDependencyGraph();

    workspacePackages.forEach((name, packageMap) {
      if (!dependencyGraph.contains(name) && name != package.name) {
        return;
      }

      var pluginPackage = json.decode(json.encode(packageMap)) as Map;

      if (pluginPackage['description'] != null &&
          pluginPackage['description'].runtimeType != String &&
          pluginPackage['description']['path'] != null) {
        var path = pluginPackage['description']['path'] as String;
        var relative = pluginPackage['description']['relative'] as bool;

        if (relative) {
          // path is relative to the workspace root, make it relative to the package
          path = utils.relativePath(
              '${workspace.path}${Platform.pathSeparator}$path', package.path);
        } else {
          // path is fully qualified already, so we'll just make it relative
          path = utils.relativePath(path, package.path);
        }

        pluginPackage['description']['path'] = path;
        pluginPackage['description']['relative'] = true;
      }

      packagePackages[name] = pluginPackage;
    });

    var packageFile = PubspecLockPubFile._(package.path);
    packageFile._packages = packagePackages;
    packageFile._yamlParsed = Map.from(workspaceFile._yamlParsed);
    packageFile._yamlParsed['packages'] = packagePackages;
    return packageFile;
  }

  @override
  String toString() {
    var string = '# Generated by pub';
    string += '\n# See https://dart.dev/tools/pub/glossary#lockfile\n';
    string += toYamlString(_yamlParsed);
    return string;
  }
}
